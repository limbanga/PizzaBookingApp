@if (OrderLines == null)
{
    <LoaderPizza />
}
else
{
    <MudList>
        <MudListItem>
            @foreach (var orderLine in OrderLines)
            {
                <div Class="d-flex"
                        Style="background: var(--mud-palette-background);">
                    <MudImage Src="@("/upload/products/"+ orderLine.Product?.ImagePath)"
                                Style="width: 25%;"
                                ObjectFit="ObjectFit.Contain"
                                Class="rounded-lg" />

                    <div style="width: 75%;" class="pa-4">
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.h6" Color="Color.Primary">@orderLine.Product?.Name</MudText>
                            <MudIconButton 
                                Icon="@Icons.Material.Filled.Close"
                                Color="Color.Info" aria-label="delete"
                                OnClick="@(() => OnRemoveItem((int) orderLine!.ProductId!))" />
                        </div>
                        <MudText Typo="Typo.h6" Color="Color.Error">
                            @orderLine.Quantity x
                            @(string.Format("${0:N2}", orderLine.Product?.Price))
                        </MudText>

                        <MudNumericField Label="Please choose quantity"
                            @bind-Value="orderLine.Quantity"
                            Min="1"
                            Max="100"
                            FullWidth="true"
                            Variant="Variant.Filled"
                            Style="background: var(--mud-palette-background);
                                    color: var(--mud-palette-primary);" />
                    </div>

                </div>
                <MudDivider />
            }
        </MudListItem>
    </MudList>
}



@code {
    [Parameter]
    public List<OrderLine> OrderLines { get; set; } = null!;
    [Parameter]
    public EventCallback LoadCart { get; set; }

    private async Task OnRemoveItem(int productId)
    {
        await _cartService.Remove(productId);
        _snackbar.Add("Remove item from cart.", Severity.Success);
        await LoadCart.InvokeAsync();
    }
}
