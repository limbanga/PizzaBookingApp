@if (orderLines == null)
{
    <LoaderPizza />
}
else
{
    <MudList>
        <MudListItem>
            @foreach (var orderLine in orderLines)
            {
                if (orderLine != null && orderLine.Product != null)
                {
                    <div Class="d-flex"
                         Style="background: var(--mud-palette-background);">
                        <MudImage Src="@(orderLine.Product.ImagePath != null?
                                    "/upload/"+ orderLine.Product.ImagePath:
                                    "default missing image url")"
                                  Style="width: 25%;"
                                  ObjectFit="ObjectFit.Contain"
                                  Class="rounded-lg" />

                        <div style="width: 75%;" class="pa-4">
                            <div class="d-flex justify-space-between align-center">
                                <MudText Typo="Typo.h6" Color="Color.Primary">@orderLine.Product.Name</MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Info" aria-label="delete" />
                            </div>
                            <MudText Typo="Typo.h6" Color="Color.Error">@orderLine.Quantity x 90.000vnd</MudText>

                            <MudNumericField Label="Please choose quantity"
                                             Min="1"
                                             Max="100"
                                             FullWidth="true"
                                             Variant="Variant.Filled"
                                             Style="background: var(--mud-palette-background);
                                            color: var(--mud-palette-primary);" />
                        </div>

                    </div>
                }
            }
        </MudListItem>
        <MudDivider />
    </MudList>
}



@code {
    private List<OrderLine> orderLines { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        orderLines = await _localStorageService.GetItemAsync<List<OrderLine>>("cart");

        if (orderLines == null)
        {
            orderLines = new List<OrderLine>();
            orderLines.Add(new OrderLine
            {
                    Id = 1,
                    OrderId = 2,
                    ProductId = 3,
                    Quantity = 3
            });
            orderLines.Add(new OrderLine
            {
                Id = 1,
                OrderId = 2,
                ProductId = 2,
                Quantity = 3
            });

            orderLines.Add(new OrderLine
                {
                    Id = 1,
                    OrderId = 2,
                    ProductId = 1,
                    Quantity = 3
                });
            await _localStorageService.SetItemAsync<List<OrderLine>>("cart", orderLines);
        }

        foreach (var orderLine in orderLines)
        {
            if (orderLine.ProductId != null)
            {    
                orderLine.Product =
                    await _httpService.Get<Product>("/Product/Get", (int) orderLine.ProductId);
            }
        }
    }
}
