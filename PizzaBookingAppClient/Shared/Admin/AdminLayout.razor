@inherits LayoutComponentBase


<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
  
        <MudToggleIconButton @bind-Toggled="@_drawerOpen"
                                Icon="@Icons.Material.Filled.Menu" 
                                Color="@Color.Primary" 
                                ToggledIcon="@Icons.Material.Filled.Close" 
                                ToggledColor="@Color.Primary" 
        @onclick=@(() => _drawerOpen = !_drawerOpen) />

        <MudSpacer />

        <MudTooltip Text="Change Theme">
            <MudIconButton Icon="@( _isDarkMode? Icons.Material.Filled.Nightlight : @Icons.Material.Filled.LightMode)"
                            Color="@( _isDarkMode? Color.Primary : Color.Warning)" 
                            OnClick="@((e) => ThemeToggle())" />
        </MudTooltip>

    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader Style="background: var(--mud-palette-appbar-background);">
            <MudText Typo="Typo.h6"
                        Style="color: white;">Admin dashoard</MudText>
        </MudDrawerHeader>
        
        <AdminNavMenu />

    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Fixed="true">
            @Body
        </MudContainer>
    </MudMainContent>

</MudLayout>

@code {
    bool _drawerOpen = true;

    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider = null!;

    private readonly MudTheme _currentTheme = new()
    {
        Palette = new Palette()
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    void ThemeToggle()
    {
        _isDarkMode = !_isDarkMode;
        StateHasChanged();
    }
}