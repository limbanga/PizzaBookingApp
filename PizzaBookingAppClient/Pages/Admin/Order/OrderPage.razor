@page "/admin/order"

<PageTitle>Admin - Order</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true" Color="Color.Primary"> Order </MudText>

<MudTable Items="orders"
          SortLabel="Sort By" Elevation="0"
          OnRowClick="RowClickEvent" T="Order"
          Dense="@dense" Hover="@hover"
          Bordered="@bordered" Striped="@striped"
          Filter="new Func<Order,bool>(FilterFunc1)">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Orders</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString"
                      Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>

        <MudTh>
            <MudTableSortLabel SortBy="@(new Func<Order, object>(x=> x.Customer != null ?  x.Customer.FirstName: ""))"
                               Style="color: var(--mud-palette-text-secondary);">
                Customer
            </MudTableSortLabel>
        </MudTh>

        <MudTh>
            <MudTableSortLabel SortBy="new Func<Order, object>(x=>x.PhoneNumber)"
                               Style="color: var(--mud-palette-text-secondary);">
                                   PhoneNumber
                               </MudTableSortLabel>
        </MudTh>

        <MudTh>
            <MudTableSortLabel Style="color: var(--mud-palette-text-secondary);"
                               SortBy="new Func<Order, object>(x =>
                                x.Address.Substring(0, x.Address.Length < 15 ? x.Address.Length: 15))">
                Address
            </MudTableSortLabel>
        </MudTh>

        <MudTh>
            <MudTableSortLabel SortBy="@(new Func<Order, object>(
                    x=>string.IsNullOrEmpty(x.State)?"not pay":x.State))"
                               Style="color: var(--mud-palette-text-secondary);">
                Status
            </MudTableSortLabel>
        </MudTh>

        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Descending"
                               SortBy="new Func<Order, object>(x=>x.UpdatedAt.ToLocalTime())"
                               Style="color: var(--mud-palette-text-secondary);">
                UpdatedAt
            </MudTableSortLabel>
        </MudTh>

    </HeaderContent>

    <RowTemplate>

        <MudTd DataLabel="CustomerName">
            @(context.Customer is null? "Unknown": context.Customer.FirstName)
        </MudTd>

        <MudTd DataLabel="PhoneNumber">
            @context.PhoneNumber
        </MudTd>

        <MudTd DataLabel="Address">
            @context.Address.Substring(0, context.Address.Length < 15 ? context.Address.Length: 15)
        </MudTd>

        <MudTd DataLabel="Status" >
            @(string.IsNullOrEmpty(context.State) ? "not pay" : context.State)
        </MudTd>

        <MudTd DataLabel="UpdatedAt" >
            @context.UpdatedAt
        </MudTd>

    </RowTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{ 10, 20, 50, 100}" />
    </PagerContent>

</MudTable>


@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    private string searchString = string.Empty;
    private List<Order>? orders;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private void RowClickEvent(TableRowClickEventArgs<Order> row)
    {
        Console.WriteLine(row.Item.Id);
        OpenDialog(row.Item);
    }

    private void OpenDialog(Order model)
    {
        var parameters = new DialogParameters();
        parameters.Add("model", model);
        parameters.Add("ReloadFunc", new Func<Task>(LoadData));

        var options = new DialogOptions { CloseOnEscapeKey = false };
        _dialogService.Show<OrderDialog>("", parameters, options);
    }

    private bool FilterFunc1(Order category)
    {
        return FilterFunc(category, searchString);
    }

    private bool FilterFunc(Order element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task LoadData()
    {
        try
        {
            orders = await _httpService.Get<List<Order>>("/Order/GetAll");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
