@page "/admin/category"

<PageTitle>Admin - Category</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true" Color="Color.Primary"> Category </MudText>

<div class="d-flex align-center pa-4">
    <MudSpacer/>
    <MudButton OnClick="@(()=> OpenDialog())"
               Variant="Variant.Filled"
               Color="@Color.Success">
        Create now!
    </MudButton>
</div>


<MudTable Items="categories"
          SortLabel="Sort By" Elevation="0"
          OnRowClick="RowClickEvent" T="Category"
          Dense="@dense" Hover="@hover"
          Bordered="@bordered" Striped="@striped"
          Filter="new Func<Category,bool>(FilterFunc1)"
          @bind-SelectedItem="selectedItem1"
          Style="background: var(--mud-palette-secondary);">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Categories</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" 
        Placeholder="Search" Adornment="Adornment.Start" 
        AdornmentIcon="@Icons.Material.Filled.Search" 
        IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>
            <MudTableSortLabel Style="color: var(--mud-palette-text-secondary);"
                               SortBy="new Func<Category, object>(x=>x.Name)">
                                   Name
            </MudTableSortLabel>
        </MudTh>

        <MudTh>
            <MudTableSortLabel Style="color: var(--mud-palette-text-secondary);"
                               SortBy="new Func<Category, object>(x=>x.CreatedAt.ToLocalTime())">
                CreatedAt
            </MudTableSortLabel>
        </MudTh>

        <MudTh>
            <MudTableSortLabel Style="color: var(--mud-palette-text-secondary);"
                               InitialDirection="SortDirection.Descending"
                               SortBy="new Func<Category, object>(x=>x.UpdatedAt.ToLocalTime())">
                UpdatedAt
            </MudTableSortLabel>
        </MudTh>

    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Name" Style="color: var(--mud-palette-text-secondary);">
            @context.Name</MudTd>

        <MudTd DataLabel="CreatedAt" Style="color: var(--mud-palette-text-secondary);">
            @context.CreatedAt</MudTd>

        <MudTd DataLabel="UpdatedAt" Style="color: var(--mud-palette-text-secondary);">
            @context.UpdatedAt</MudTd>

    </RowTemplate>

    <PagerContent>

        <MudTablePager Style="color: var(--mud-palette-text-secondary);"
                       PageSizeOptions="new int[] { 10, 20, 50, 100}" />
    </PagerContent>

</MudTable>


@code {

    private bool dense = true;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    private string searchString1 = string.Empty;
    private Category selectedItem1 = null!;
    private List<Category>? categories;

    protected override async Task OnInitializedAsync()
    {
        categories = await _httpService.GetAll<Category>("/Category/GetAll");
    }

    private void RowClickEvent(TableRowClickEventArgs<Category> row)
    {
        // nav to update
        Console.WriteLine(row.Item.Name);
        OpenDialog(row.Item);
    }

    private void OpenDialog(Category? model = null)
    {
        bool isUpdate = true;
        if (model is null)
        {
            model = new();
            isUpdate = false;
        }

        var parameters = new DialogParameters();
        parameters.Add("model", model);
        parameters.Add("isUpdate", isUpdate);
        var options = new DialogOptions { CloseOnEscapeKey = false };
        _dialogService.Show<CategoryDialog>("", parameters, options);
    }

    private bool FilterFunc1(Category category)
    {
        return FilterFunc(category, searchString1);
    }

    private bool FilterFunc(Category element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
