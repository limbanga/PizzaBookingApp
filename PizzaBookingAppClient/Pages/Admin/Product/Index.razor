@page "/admin/product"
@using PizzaBookingShared.Entities
@using PizzaBookingAppClient.Shared

<PageTitle>Admin - Product</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true"> Product </MudText>

@if (products == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else if (products.Count == 0)
{
    <MudButton Typo="Typo.h4" GutterBottom="true" Color="@Color.Primary">
        Product is empty.
        <MudLink Href="/admin/product/create">Create now!</MudLink>
    </MudButton>
}
else
{
    <MudItem Class="d-flex justify-end">
        <MudButton Href="/admin/product/create" Variant="Variant.Filled" Color="@Color.Success">Create</MudButton>
    </MudItem>

    <MudTable Items="products" Hover="true" SortLabel="Sort By" Elevation="0" OnRowClick="RowClickEvent" T="Product">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Category, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x=>x.Price)">Price</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="@(new Func<Product, object>(x=>x.Category == null ? "-" : x.Category.Name))">Category</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x=>x.CreatedAt.ToLocalTime())">CreatedAt</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x=>x.UpdatedAt.ToLocalTime())">UpdatedAt</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="Category">@(context.Category == null? "-": context.Category.Name)</MudTd>
            <MudTd DataLabel="CreatedAt">@context.CreatedAt</MudTd>
            <MudTd DataLabel="UpdatedAt">@context.UpdatedAt</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] {10, 50, 100}" />
        </PagerContent>
    </MudTable>
}


@code {
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        products = await _httpService.GetAll<Product>("/Product/GetAll");

        foreach (var product in products)
        {
            if (product.CategoryId != null)
            {
                product.Category = await _httpService.Get<Category>("/Category/Get", (int) product.CategoryId);
            }
        }
    }

    private void RowClickEvent(TableRowClickEventArgs<Product> row)
    {
        Console.WriteLine(row.Item.Name);
    }
}
