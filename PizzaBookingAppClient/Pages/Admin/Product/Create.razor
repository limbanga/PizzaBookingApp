@page "/admin/product/create"
@page "/admin/product/update/{Id:int}"

@using PizzaBookingShared.Entities
@using PizzaBookingAppClient.Shared

<PageTitle>Create product</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true"> Add new product </MudText>
<MudLink Href="/admin/product" Class="mb-2">Back to list</MudLink>
    
<EditForm Model="@product" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Product name" HelperText="Max. 50 characters"
                    @bind-Value="product.Name" For="@(() => product.Name)" />
                    <MudNumericField Label="Price" HelperText="VND" Min="0" Max="100000000"
                    @bind-Value="product.Price" For="@(() => product.Price)" />
                    <MudTextField Label="Description" HelperText="Optional"
                    @bind-Value="product.Description" For="@(() => product.Description)" />

                    <MudSelect T="int" Label="Category" AnchorOrigin="Origin.BottomCenter" ValueChanged="HandleChangeCategory">
                        @if (categories != null)
                        {
                            @foreach (var category in categories!)
                            {
                                <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                        
                    <InputFile OnChange="OnFileChange" id="__upload_image_product" hidden/>

                    <MudItem Class="d-flex justify-start align-end gap-1 mt-2">
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   for="__upload_image_product">
                            Choose product image
                        </MudButton>

                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Variant="Variant.Outlined"
                                       Color="Color.Error"
                                       Size="Size.Medium"
                                       OnClick="ClearFileInput" />
                    </MudItem>
                   

                    <MudText>@browserFile?.Name</MudText>

                </MudCardContent>

                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">Create</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="5">
            <MudPaper Class="mud-height-full d-flex justify-center align-center">
                <MudPaper Class="border-solid border-1 mud-border-primary" Width="250px">
                    <MudImage Src="@(imageTempPath?? "https://www.pizzaexpress.vn/wp-content/uploads/2019/12/P1rs1.jpg")"
                              Alt="Image about product"
                              Width="250"
                              Height="200"
                              ObjectFit="ObjectFit.Cover"
                              ObjectPosition="ObjectPosition.Center"
                              Class="rounded-lg object-center" />

                    <MudText Typo="Typo.h5"
                             Align="Align.Center"
                             Color="Color.Dark"
                             Class="py-2">@product.Name</MudText>

                    <MudText Typo="Typo.h6"
                             Align="Align.Center"
                             Class="py-2"
                             Color="Color.Error">
                        @(String.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:N0} vnd  ",
                            product.Price))
                    </MudText>

                    <MudItem Class="d-flex align-center justify-center py-2">
                        <MudRating ReadOnly="true" SelectedValue="2" />
                        <MudText Typo="Typo.caption">64 lượt</MudText>
                    </MudItem>

                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.ShoppingCart"
                               FullWidth="true"
                               Color="Color.Error">Order</MudButton>

                </MudPaper>

            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>

    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; } = null;
    private Product product = new Product();
    private string? imageTempPath = null;
    private IBrowserFile? browserFile = null;
    private List<Category>? categories;

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            product = await _httpService.Get<Product>("/Product/Get", (int) Id);
        }

        categories = await _httpService.GetAll<Category>("/Category/GetAll");
    }

    private async void OnValidSubmit(EditContext context)
    {
        if (Id == null)
        {
            await PostAddProduct();
        }
        else
        {
            await PutUpdateProduct();
        }
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        browserFile = e.File;
        imageTempPath = await _jSRuntime.InvokeAsync<string>("getTempURL", "__upload_image_product");
        StateHasChanged();
    }

    private void HandleChangeCategory(int categoryId)
    {
        product.CategoryId = categoryId;
    }

    private void ClearFileInput()
    {
        browserFile = null;
        imageTempPath = null;
    }

    private async Task PostAddProduct()
    {
        if (browserFile == null)
        {
            throw new Exception("browserFile is null");
        }

        product.ImagePath = await _httpService.PostFile(browserFile);
        await _httpService.Create<Product>("Product/Create", product);
        _snackbar.Add("Add category success", Severity.Success);
        StateHasChanged();
    }

    private async Task PutUpdateProduct()
    {
        if (browserFile != null)
        {
            product.ImagePath = await _httpService.PostFile(browserFile);
        }
        await _httpService.Update<Product>("Product/Update", product);
        _snackbar.Add("Update product success", Severity.Success);
        StateHasChanged();
    }
}
