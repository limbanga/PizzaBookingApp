@page "/account/change-password"
@attribute [Authorize]

<PageTitle>Change password</PageTitle>

<MudGrid Class="d-flex align-center justify-center">
	<MudItem xs="12" sm="10" md="8" lg="6" Class="mt-8">
		<MudPaper Class="pa-8 d-flex justify-center flex-wrap"
				  Style="background: var(--mud-palette-secondary); width: 100%;">

			<MudText Typo="Typo.h5" Color="Color.Primary" Class="pa-4">
				Change password
			</MudText>


			<EditForm Model="model" OnValidSubmit="OnChangePassword"
					  style="width: 100%;">
					  <DataAnnotationsValidator/>

				<MudTextField @bind-Value="@model.OldPassword"
							  Class="mt-8"
							  For="@(() => model.OldPassword)"
							  FullWidth=true
							  Label="Old password"
							  InputType="InputType.Password"
							  Variant="Variant.Text"
							  HelperText="old password" />

				<MudTextField @bind-Value="@model.NewPassword"
							  Class="mt-8"
							  For="@(() => model.NewPassword)"
							  FullWidth=true
							  Label="New password"
							  InputType="InputType.Password"
							  Variant="Variant.Text"
							  HelperText="new password" />

				<MudTextField @bind-Value="@model.ConfirmPassword"
							  Class="mt-8"
							  For="@(() => model.ConfirmPassword)"
							  FullWidth=true
							  Label="Re-password"
							  InputType="InputType.Password"
							  Variant="Variant.Text"
							  HelperText="confirm password" />

				<MudButton ButtonType="ButtonType.Submit"
						   Class="mt-8"
						   Variant="Variant.Filled"
						   FullWidth=true
						   Color="Color.Success">
					@if (isOnChangePasswordProcessing)
					{
						<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
						<MudText Class="ms-2">Processing</MudText>
					}
					else
					{
						<MudText>Change</MudText>
					}
				</MudButton>
			</EditForm>

		</MudPaper>
	</MudItem>
</MudGrid>
@code {
	private ChangePasswordViewModel model = new();

	private bool isOnChangePasswordProcessing = false;
	private async Task OnChangePassword()
	{
		if (isOnChangePasswordProcessing)
		{
			return;
		}

		try
		{
			Console.WriteLine("onChangePassword enter");
			isOnChangePasswordProcessing = true;

			await _httpService.Create<ChangePasswordViewModel>(
				"/User/ChangePassword",
				model, isReturn: false);

			_snackbar.Add("Password has been changed.", Severity.Success);
			model = new();
		}
		catch (UnAthorizeException)
		{
			_snackbar.Add("Old password is incorrect.", Severity.Error);
		}
		catch (AppException ex)
		{
			Console.WriteLine(ex.Message);
			_snackbar.Add("Failed to connect to the server.", Severity.Error);
		}
		finally
		{
			isOnChangePasswordProcessing = false;
			StateHasChanged();
			Console.WriteLine("onChangePassword done");
		}
	}
}
