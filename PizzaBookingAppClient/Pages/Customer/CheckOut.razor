@page "/checkout"


@* Kiếm font chữ thế vào *@
<MudText Typo="Typo.h3" Color="Color.Primary" Align="Align.Center" Class="pa-4">
    Enjoy your meal!
</MudText>

<MudGrid>
    <MudItem xs="12" sm="8">
        @* Table *@
        <MudPaper Class="mud-width-full"
                  Style="background: var(--mud-palette-secondary)">

            <MudTable Items="@orderLines"
                      Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      Loading="@_showLoading"
                      LoadingProgressColor="Color.Error"
                      Style="background: var(--mud-palette-secondary)">

                <HeaderContent>
                    <MudTh>Product</MudTh>
                    <MudTh>Image</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh>Total</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd Style="color: var(--mud-palette-text-secondary);"
                           DataLabel="Product">@context.Product?.Name</MudTd>

                    <MudTd Style="color: var(--mud-palette-text-secondary);"
                           DataLabel="Product">
                        @* Show image here *@
                        <MudImage Src="@(
                            context.Product!.ImagePath is not null ?
                            "/upload/" + context.Product!.ImagePath:
                            "/public/images/nothing.png"
                                )"
                                  Height="100"
                                  Width="200"
                                  ObjectFit="ObjectFit.Contain" />

                    </MudTd>

                    <MudTd Style="color: var(--mud-palette-text-secondary);"
                           DataLabel="Price">$@context.Product!.Price</MudTd>

                    <MudTd Style="color: var(--mud-palette-text-secondary);"
                           DataLabel="Quantity">

                        <MudButtonGroup OverrideStyles=false>
                            <MudButton Color="Color.Error"
                                       Variant="Variant.Filled"
                                       OnClick="@(()=>ChangeQuantity(context, -1))">-</MudButton>

                            <MudButton Color="Color.Primary" Variant="Variant.Outlined">@context.Quantity</MudButton>

                            <MudButton Color="Color.Success"
                                       Variant="Variant.Filled"
                                       OnClick="@(()=>ChangeQuantity(context, 1))">+</MudButton>
                        </MudButtonGroup>

                    </MudTd>

                    <MudTd Style="color: var(--mud-palette-text-secondary);"
                           DataLabel="Total">

                        $@(context.Quantity * context.Product?.Price)

                    </MudTd>

                </RowTemplate>

            </MudTable>

        </MudPaper>

        @* Total *@
        <MudPaper Class="mt-4 py-4"
                  Style="background: var(--mud-palette-secondary)">
            <MudText Class="pe-16"
                     Align="Align.End"
                     Typo="Typo.h5"
                     Color="Color.Error">
                Total: $@TotalPrice
            </MudText>
        </MudPaper>

    </MudItem>

    <MudItem xs="12" sm="4">
        <MudPaper 
            Class="pa-4"
            Style="background: var(--mud-palette-secondary)">

            <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center">Check out</MudText>

            <EditForm Model="model" OnValidSubmit="OnConfirmPayment">
                
                <DataAnnotationsValidator />

                <MudTextField @bind-Value="@model.PhoneNumber"
                              For="@(() => model.PhoneNumber)"
                              Class="mt-4"
                              Label="Phone number"
                              Variant="Variant.Text"
                              Margin="Margin.Dense" />

                <MudTextField @bind-Value="model.Address"
                              For="@(() => model.Address)"
                              Class="mt-4"
                              Label="Address"
                              Variant="Variant.Text"
                              Margin="Margin.Dense" />

                <MudButton ButtonType="ButtonType.Submit"
                           StartIcon="@(!isProcessingConfirmPayment?Icons.Material.Filled.CreditScore:"")"
                           Disabled="isProcessingConfirmPayment"
                           Class="mt-8"
                           Color="Color.Warning"
                           Variant="Variant.Outlined"
                           FullWidth="true">
                    @if (isProcessingConfirmPayment)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2" Color="Color.Warning">Processing</MudText>
                    }
                    else
                    {
                        <MudText> Pay $@TotalPrice </MudText>
                    }

                </MudButton>
            </EditForm>
            
            @if (isPayClicked)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center">Scan qr code to pay</MudText>

                <MudImage Src="/public/images/qr_code_demo.png" Fluid="true" />

                <MudButton OnClick="OnScanQRcode"
                           StartIcon="@(!isScanQRProcessing? Icons.Material.Filled.CreditScore :"")"
                           Class="mt-8"
                           Color="Color.Success"
                           Variant="Variant.Filled"
                           FullWidth="true">
                    @if (isScanQRProcessing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Scan</MudText>
                    }
                    
                </MudButton>
            }

        </MudPaper>
    </MudItem>
</MudGrid>




@code {
    private const int DebounceDelay = 400; //ms
    private bool _showLoading => orderLines is null;
    public Order model { get; set; } = new();
    private List<OrderLine> orderLines = null!;
    private double TotalPrice { get; set; } = 0;
    private bool isPayClicked = false;

    protected override async Task OnInitializedAsync()
    {
        orderLines = await _cartService.GetAsync();
        foreach (var orderLine in orderLines)
        {
            if (orderLine.ProductId != null)
            {
                orderLine.Product =
                    await _httpService.Get<Product>("/Product/Get", (int)orderLine.ProductId);
            }
        }
        PreviewTotalPrice();
        StateHasChanged();
    }

    private void ChangeQuantity(OrderLine orderLine, int amount)
    {
        if (orderLine.Quantity + amount > 0)
        {   
            orderLine.Quantity += amount;
        }
        PreviewTotalPrice();
        Console.WriteLine("debound trigger");
        Debounce(async () => await SaveCartChange(), 5000);
    }

    private void PreviewTotalPrice()
    {
        TotalPrice = _cartService.PreviewTotalPrice(orderLines);
    }

    private async Task SaveCartChange()
    {
        Console.WriteLine("Call back func start...");
        if (orderLines is not null)
        {  
            await _cartService.SaveCart(orderLines);
        }
        Console.WriteLine("Call back done.");
    }

    private static System.Timers.Timer? debounceTimer;
    private static void Debounce(Action action, int milliseconds)
    {
        if (debounceTimer != null)
        {
            debounceTimer.Stop();
            debounceTimer.Dispose();
        }

        debounceTimer = new System.Timers.Timer();
        debounceTimer.Interval = milliseconds;
        // gắn sự  kiện sẽ thực hiện 
        // khi đếm hết thời gian
        debounceTimer.Elapsed += (sender, eventArgs) =>
        {
            Console.WriteLine("Time out! call back!");
            action();
            debounceTimer.Stop();
            debounceTimer.Dispose();
        };

        debounceTimer.Start();
    }   

    private bool isProcessingConfirmPayment = false;
    private async Task OnConfirmPayment()
    {
        Console.WriteLine("OnConfirmPayment enter");
        isProcessingConfirmPayment = true;
        try
        {
            model.OrderLines = orderLines;
            var responeModel = await _httpService.PostAsync<Order, Order>("/Order/Create", model);
            if (responeModel is null)
            {
                throw new Exception("responeModel is null");
            }
            model = responeModel;
            isPayClicked = true;
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isProcessingConfirmPayment = false;
            Console.WriteLine("OnConfirmPayment done");
        }
    }

    private bool isScanQRProcessing = false;
    private async Task OnScanQRcode()
    {
        Console.WriteLine("OnScanQRcode enter");
        isScanQRProcessing = true;
        try
        {
            await _httpService.PostAsync<Int32>("/Order/Pay", model.Id);
            _snackbar.Add(
                "Place order successfully. Your order is on the way", 
                Severity.Success,
                config =>
                {
                    config.VisibleStateDuration = 500;
                    config.HideTransitionDuration = 3000;
                    config.ShowTransitionDuration = 500;
                });
        }
        catch (Exception)
        {
            _snackbar.Add("Something went wrong!", Severity.Error);
            throw;
        }
        finally
        {
            isScanQRProcessing = false;
            Console.WriteLine("OnScanQRcode done");
            StateHasChanged();
        }
    }
}
