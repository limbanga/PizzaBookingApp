@using System.Net.Http.Headers;
@using Microsoft.JSInterop;
@inject IProductService _productService
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
<!--
/////////////////////////////////////////////
    INJECT ONLY ONE FOR EACH PAGE
/////////////////////////////////////////////
-->
<div class="modal fade" id="__add_product_modal" 
    data-bs-backdrop="static" data-bs-keyboard="false"
     tabindex="-1" aria-labelledby="__add_product_modal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Add new product</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm OnSubmit="HandleAddProduct" Model="Product">
                <div class="modal-body">

                    <div class="form-floating mb-3">
                        <InputText class="form-control" placeholder=" " @bind-Value="@Product.Name" />
                        <label>Product name</label>
                    </div>

                    <div class="form-floating mb-3">
                        <InputTextArea class="form-control" placeholder=" " @bind-Value="@Product.Description" />
                        <label>Desciption</label>
                    </div>

                    <div class="form-floating mb-3">
                        <InputNumber class="form-control" placeholder=" " @bind-Value="@Product.Price" />
                        <label>Price</label>
                    </div>

                    <div class="mb-3">
                        <label class="mb-1" for="img-file">Images</label>
                        <InputFile type="file" id="img-file" class="form-control" placeholder=" "
                            OnChange="OnFileSelected" accept="image/*" name="product_image"/>
                    </div>

                    <div class="">
                        <label>Image priview</label>
                        <div class="text-center border rounded p-2 object-fit-contain">
                            @if (string.IsNullOrEmpty(@imgUrl))
                            {
                                <small class="text-muted">Please choose an image of product.</small>
                            }
                            else
                            {    
                                <img src="@imgUrl" alt="preview" class="mw-100"/>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Close</button>
                    <button 
                        type="submit"
                        class="btn btn-primary btn-sm"
                        data-bs-dismiss="modal">
                        Save
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public required ProductViewModel Product { get; set; }
    [Parameter]
    public required EventCallback<Task> SaveButtonHandler { get; set; }

    private IBrowserFile browserFile { get; set; } = null!;
    private string imgUrl { get; set; } = null!;

    private async Task HandleAddProduct()
    {
        try
        {
            Product.ImagePath = await HandleUploadFile();
            await _productService.CreateAsync(Product);
            Console.WriteLine("Added product sucessfully!");
            Console.WriteLine(Product.ImagePath);
            await SaveButtonHandler.InvokeAsync();
        }
        catch (ConnectException e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        browserFile = e.File;
        imgUrl = await _jsRuntime.InvokeAsync<string>("createTempUrl", "img-file");
    }

    private async Task<string> HandleUploadFile()
    {
        // get file from input
        StreamContent fileContent = new StreamContent(browserFile.OpenReadStream(long.MaxValue));
        string fileName = browserFile.Name;

        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
        content.Add(fileContent, "file", fileName);
        Console.WriteLine("Upload image ok!");
        return await _productService.UploadProductImage(content);
    }

}
